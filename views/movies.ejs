<% layout('layouts/boilerplate') %>
<h1>Movies Page</h1>

<!-- Search/Sort/Filter Bar -->
<div class="col mt-3 mb-3">

    <!-- Search -->
    <form method="get" action="/movies/search">
        <div>
            <label for="q">Search: </label>
            <input type="text" name="q" placeholder="Search query" 
            <% if (typeof query !== null) { %> 
                value="<%= query %>" required>
            <% } %> 
            <input type="hidden" name="savedColumns" id="savedColumns">
            <button class="btn btn-primary btn-sm"">Search</button>
        </div>
        
    </form>
    
    <!-- Sort -->
    <div>
        <label for="sort">Sort by: </label>
        <select name="sort" id="sort">
            <% for (let i = 0; i < titles.length; i++) { %> 
                <% if (!['URL', 'Genres', 'Directors'].includes(titles[i])) { %> 
                    <option value="<%= titles[i] %>"><%= titles[i] %></option>
                <% } %> 
            <% } %> 
        </select>
        <button id="sortButton" class="btn btn-primary btn-sm">Sort</button>
        <button id="sortAscDes" class="btn btn-dark btn-sm">&#x2191&#x2193</button>
    </div>

    <!-- Filter -->
    <div>
        <label for="filter">Filter by: </label>
        <select name="filter" id="filter">
            <% for (let i = 0; i < titles.length; i++) { %> 
                <% if (!['URL'].includes(titles[i])) { %> 
                    <option value="<%= titles[i] %>"><%= titles[i] %></option>
                <% } %> 
            <% } %> 
        </select>
        <select name="filterOperator" id="filterOperator"></select>
        <span id="filterSpan"></span>
        <button id="filterButton" class="btn btn-primary btn-sm">Filter</button>
    </div>

    <div id="filterClose">
    </div>
    
    <!-- Clear filters -->
    <form method="get" action="/movies">
        <button class="btn btn-primary btn-sm">Clear All</button>
    </form>
</div>

<!-- Display of the movies in table form -->
<table class="table table-striped table-hover" id="table1">
    <thead>
        <tr>
            <th><datalist id="addCol"></datalist></th>
        </tr>
    </thead>
    <tbody id="tableDisplay">
    </tbody>
</table>


<%- include("./scripts/variables/displayList") %> 
<%- include("./scripts/variables/titles") %> 
<%- include("./scripts/variables/tableColumns") %> 

<%- include("./scripts/sorting") %> 
<%- include("./scripts/filtering") %> 

<script type='text/javascript'>

    let tableDisplay = document.getElementById('tableDisplay')
    let tableColumns = loadedTableColumns
    
    let headerTr = document.querySelector('thead').children[0]

    // Add dropdown list to display at the end of the table
    function addDropDownTableHeadings() {

        // Add dropdown for adding column
        let thDropdown = document.createElement('select')
        thDropdown.id = 'thDropdown'

        // Add blank select entry
        let headerOptionBlank = document.createElement('option')
        headerOptionBlank.value = -1
        headerOptionBlank.innerHTML = ''
        headerOptionBlank.selected = true
        thDropdown.appendChild(headerOptionBlank)

        headerTr.appendChild(thDropdown)

        // Add entries for all titles not currently displayed
        for (let i = 0; i < titles.length; i++) {
            
            // If the column isnt already displayed
            if (!tableColumns.includes(i)) {
                let headerOption = document.createElement('option')
                headerOption.value = i
                headerOption.innerHTML = titles[i]
                thDropdown.appendChild(headerOption)
            }
        }
        
    }

    // When new column is selected
    headerTr.addEventListener('change', (evt) => {
        if (evt.target.value !== -1) {
            tableColumns.push(parseInt(evt.target.value))
            updateTable()
            includeLRArrows()
        }
    })

    // Updates the table after sort/filter
    function updateTable() {

        // Update Table Headings
        headerTr.innerHTML = ''
        for (let col of tableColumns) {
            let th = document.createElement('th')
            th.innerHTML = titles[col]
            headerTr.appendChild(th)

            // Create close buttons for each button
            let removeColButton = document.createElement('button')
            removeColButton.name = 'removeCol'
            removeColButton.value = col
            removeColButton.innerHTML = '-'
            removeColButton.className = 'badge rounded-pill bg-danger'
            th.appendChild(removeColButton)

            removeColButton.addEventListener('click', (evt) => {

                let index = tableColumns.findIndex((el) => el === parseInt(evt.target.value))
                
                // Remove from the table headers array
                tableColumns.splice(index, 1)

                // Delete the header
                let deleteHeader = document.querySelectorAll('th')[index]
                deleteHeader.remove()

                // Delete the body
                for (let child of tableDisplay.children) {
                    let grandchild = child.children[index]
                    grandchild.remove()
                }

                // Update the datalist

                // Add dropdown for adding column
                let foundDropdown = document.getElementById('thDropdown')
                foundDropdown.innerHTML = ''

                // Add blank select entry
                let headerOptionBlank = document.createElement('option')
                headerOptionBlank.value = -1
                headerOptionBlank.innerHTML = ''
                headerOptionBlank.selected = true
                foundDropdown.appendChild(headerOptionBlank)

                headerTr.appendChild(foundDropdown)

                // Add entries for all titles not currently displayed
                for (let i = 0; i < titles.length; i++) {
                    
                    // If the column isnt already displayed
                    if (!tableColumns.includes(i)) {
                        let headerOption = document.createElement('option')
                        headerOption.value = i
                        headerOption.innerHTML = titles[i]
                        foundDropdown.appendChild(headerOption)
                    }
                }
            })
        }

        // Update dropdown for the table
        addDropDownTableHeadings()

        // Update Table body
        tableDisplay.innerHTML = ''

        for (let i = 0; i < displayList.length; i++) {
            let newTr = document.createElement('tr')

            for (let col of tableColumns) {
                let newTd = document.createElement('td')

                // If the column is 'Title', put in a link tag
                if (col === 3) {
                    let newA = document.createElement('a')
                    newA.href = "/movies/" + displayList[i]['Const_IMDB']
                    newA.innerHTML = displayList[i][titles[col]]
                    newTd.appendChild(newA)
                }

                else {
                    newTd.innerHTML = displayList[i][titles[col]]
                }

                // Append the column to the row
                newTr.appendChild(newTd)

            }

            // Append the row to the table
            tableDisplay.appendChild(newTr)
        }

        // Save the columns
        document.getElementById('savedColumns').value = JSON.stringify(tableColumns)
    }

    // Update Left/right arrows
    function includeLRArrows() {

        function swap(x, y) {
            const rows = document.querySelectorAll("tr")
            for (const row of rows) {
                row.insertBefore(row.children[x], row.children[y]);
            }
        }

        function arrowButtons(index, diff) {
            // Swap columns
            let tmp = tableColumns[index]
            tableColumns[index] = tableColumns[index + diff]
            tableColumns[index + diff] = tmp

            let LHStableheadings
            let RHStableheadings

            if (diff === -1) {
                swap(index, index + diff)
                LHStableheadings = document.querySelectorAll('th')[index + diff]
                RHStableheadings = document.querySelectorAll('th')[index]
            }
            else if (diff === 1) {
                swap(index + diff, index)
                LHStableheadings = document.querySelectorAll('th')[index]
                RHStableheadings = document.querySelectorAll('th')[index + diff]
            }

            // Swap buttons
            let LHSbuttons = LHStableheadings.childNodes
            let originalLHSValue = LHSbuttons[1].value

            let RHSbuttons = RHStableheadings.childNodes
            let originalRHSValue = RHSbuttons[1].value
            let originalRHSLength = RHSbuttons.length

            //LHS
            // One button
            if (LHSbuttons.length === 3) {
                LHSbuttons[2].value = originalRHSValue

                RHStableheadings.appendChild(LHSbuttons[2])
            }
            // Two buttons
            else if (LHSbuttons.length === 4) {
                LHSbuttons[2].value = originalRHSValue
                LHSbuttons[3].value = originalRHSValue

                RHStableheadings.appendChild(LHSbuttons[2])
                RHStableheadings.appendChild(LHSbuttons[2])
            }

            //RHS
            // One button
            if (originalRHSLength === 3) {
                RHSbuttons[2].value = originalLHSValue

                LHStableheadings.appendChild(RHSbuttons[2])
            }
            // Two buttons
            else if (originalRHSLength === 4) {
                RHSbuttons[2].value = originalLHSValue
                RHSbuttons[3].value = originalLHSValue

                LHStableheadings.appendChild(RHSbuttons[2])
                LHStableheadings.appendChild(RHSbuttons[2])
            }
        }

        let tableHeadings = document.querySelectorAll('th')
        
        // Add displayed arrows
        for (let [index, heading] of Object.entries(tableHeadings)) {

            // Left arrow
            if (parseInt(index) !== 0) {

                let leftArrButton = document.createElement('button')
                leftArrButton.name = 'leftCol'
                leftArrButton.value = tableColumns[parseInt(index)]
                leftArrButton.innerHTML = '&#x2190'
                leftArrButton.className = 'badge rounded-pill bg-warning'
                heading.appendChild(leftArrButton)

                leftArrButton.addEventListener('click', (evt) => {
                    let index = tableColumns.findIndex((el) => el === parseInt(evt.target.value))
                    arrowButtons(index, -1)
                    
                })
            }

            // Right arrow
            if (parseInt(index) !== tableHeadings.length-1) {
                let rightArrButton = document.createElement('button')
                rightArrButton.name = 'rightCol'
                rightArrButton.value = tableColumns[parseInt(index)]
                rightArrButton.innerHTML = '&#x2192'
                rightArrButton.className = 'badge rounded-pill bg-warning'
                heading.appendChild(rightArrButton)

                rightArrButton.addEventListener('click', (evt) => {
                    let index = tableColumns.findIndex((el) => el === parseInt(evt.target.value))
                    arrowButtons(index, 1)
                })
            }
        }
    }

    // Onload functions
    window.onload = function () {
        updateTable()
        includeLRArrows()
    }

</script>