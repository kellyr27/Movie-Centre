<script>
    let notDisplayList = []
    let filtersSelected = {}
    let filterOperators = ['greater than', 'less than', 'equal to', 'not equal to', 'between', 'not between', 'greater than or equal to', 'less than or equal to']
    let filterOperatorSelector = document.getElementById('filterOperator')
    let filterOperator = document.getElementById('filterOperator')
    let filterSpan = document.getElementById('filterSpan')
    let filter = document.getElementById('filter')
    let filterButton = document.getElementById('filterButton')
    let filterClose = document.getElementById('filterClose')
    let closeButtons = document.getElementsByName('filterCloseButton')

    // Creating object for existing filters
    for (let prop of titles) {
        filtersSelected[prop] = {}
        for (let op of filterOperators) {
            if (['between', 'not between'].includes(op)) {
                filtersSelected[prop][op] = {
                    lower: [],
                    upper: []
                }
            }
            else {
                filtersSelected[prop][op] = new Set()
            }
        }
    }

    // Creating the dropdown options for the filter
    for (let i = 0; i < filterOperators.length; i++) {
        let newSelector = document.createElement('option')
        newSelector.value = filterOperators[i]
        newSelector.innerHTML = filterOperators[i]
        filterOperatorSelector.appendChild(newSelector)
    }

    function updateDropdownsFilters() {
        while (filterSpan.firstChild) {
            filterSpan.removeChild(filterSpan.firstChild)
        }

        let filterSelector = document.createElement('select')
        filterSelector.id = "filterSelector"
        filterSpan.appendChild(filterSelector)

        // Creates two dropdowns if between's are selected
        if (['between', 'not between'].includes(filterOperator.value)) {
            let filterSelector2 = document.createElement('select')
            filterSelector2.id = "filterSelector2"
            filterSpan.appendChild(filterSelector2)
        }

        // Creates the dropdown without filtering and sorting the dropdown
        let filterList = []

        for (let i = 0; i < displayList.length; i++) {

            // Seperate to show elements in an array type
            if (['Genres', 'Directors'].includes(filter.value)) {

                for (let j = 0; j < displayList[i][filter.value].length; j++) {
                    // If not empty
                    if (displayList[i][filter.value][j]) {
                        filterList.push(displayList[i][filter.value][j])
                    }
                }
            }
            else {
                // If not empty
                if (displayList[i][filter.value]) {
                    filterList.push(displayList[i][filter.value])
                }
            }
        }

        // Removes duplicates from the filter list
        filterList = [...new Set(filterList)]

        // Sort the filter list

        // String filters
        if (['Title', 'Title Type', 'Const_IMDB', 'Genres', 'Directors'].includes(filter.value)) {
            filterList.sort((firstEl, secondEl) => {
                if (firstEl.toLowerCase() < secondEl.toLowerCase()) {
                    return -1
                }
                else {
                    return 1
                }
            })
        }

        // Number filters
        if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
            filterList.sort((firstEl, secondEl) => {
                return (firstEl - secondEl)
            })
        }

        // Dates filters
        if (['Date Rated', 'Release Date'].includes(filter.value)) {
            filterList.sort((firstEl, secondEl) => {
                let iDate = Date.parse(firstEl.slice(6, 10) + '-' + firstEl.slice(3,5) + '-' + firstEl.slice(0,2))
                let jDate = Date.parse(secondEl.slice(6, 10) + '-' + secondEl.slice(3,5) + '-' + secondEl.slice(0,2))
                return (iDate - jDate)
            })
        }


        // Creates the dropdown list
        for (let i = 0; i < filterList.length; i++) {
            let newOption = document.createElement('option')
            newOption.value = filterList[i]
            newOption.innerHTML = filterList[i]
            filterSelector.appendChild(newOption)
            if (['between', 'not between'].includes(filterOperator.value)) {
                filterSelector2.appendChild(newOption.cloneNode(true))
            }
        }
    }

    // Adds the dropdown when filter operator is changed
    filterOperator.addEventListener('change', updateDropdownsFilters)
    filter.addEventListener('change', updateDropdownsFilters)
    window.onload = updateDropdownsFilters()

    function filterDisplay() {

        let tempDisplay = []

    }

    // Checks if the filter selected was a duplicate
    function duplicateCheckFilters() {
        // Check if filter is a duplicate (not betweens)
        if (filtersSelected[filter.value][filterOperator.value]) {
            if (['between', 'not between'].includes(filterOperator.value)) {
                if ((filtersSelected[filter.value][filterOperator.value].lower.includes(filterSelector.value)) && (filtersSelected[filter.value][filterOperator.value].upper.includes(filterSelector2.value))) {
                    return false
                }
                else {
                    filtersSelected[filter.value][filterOperator.value].lower.push(filterSelector.value)
                    filtersSelected[filter.value][filterOperator.value].upper.push(filterSelector2.value)
                    return true
                }
            }
            else {
                if (filtersSelected[filter.value][filterOperator.value].has(filterSelector.value)) {
                    return false
                }
                else {
                    filtersSelected[filter.value][filterOperator.value].add(filterSelector.value)
                    return true
                }
            }
        }
    }

    // Function adds filters
    function addFilters() {
        let tempDisplayList = []
        
        for (let i = 0; i < displayList.length; i++) {
            switch (filterOperator.value) {

                // If greater than is selected (>)
                case filterOperators[0]:
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (displayList[i][filter.value].toLowerCase() > filterSelector.value.toLowerCase()) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (displayList[i][filter.value] > parseInt(filterSelector.value)) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))

                        if (iDate > jDate) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if (sub.toLowerCase() > filterSelector.value.toLowerCase()) {
                                tempDisplayList.push(displayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                notDisplayList.push(displayList[i])
                            }
                        }
                    }

                    break

                // If less than is selected (<)
                case filterOperators[1]:
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (displayList[i][filter.value].toLowerCase() < filterSelector.value.toLowerCase()) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (displayList[i][filter.value] < parseInt(filterSelector.value)) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))

                        if (iDate < jDate) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if (sub.toLowerCase() < filterSelector.value.toLowerCase()) {
                                tempDisplayList.push(displayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                notDisplayList.push(displayList[i])
                            }
                        }
                    }

                    break

                // If less than is selected (==)
                case filterOperators[2]:

                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (displayList[i][filter.value].toLowerCase() === filterSelector.value.toLowerCase()) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (displayList[i][filter.value] === parseInt(filterSelector.value)) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))

                        if (iDate === jDate) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if (sub.toLowerCase() === filterSelector.value.toLowerCase()) {
                                tempDisplayList.push(displayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                notDisplayList.push(displayList[i])
                            }
                        }
                    }
                    
                    break
                case 'not equal to':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (displayList[i][filter.value].toLowerCase() !== filterSelector.value.toLowerCase()) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (displayList[i][filter.value] !== parseInt(filterSelector.value)) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))

                        if (iDate !== jDate) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if (sub.toLowerCase() === filterSelector.value.toLowerCase()) {
                                found = true
                                break
                            }
                        }
                        if (found) {
                            notDisplayList.push(displayList[i])
                        }
                        else {
                            tempDisplayList.push(displayList[i])
                        }
                    }
                    break
                case 'between':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if ((displayList[i][filter.value].toLowerCase() >= filterSelector.value.toLowerCase()) && (displayList[i][filter.value].toLowerCase() <= filterSelector2.value.toLowerCase())) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if ((displayList[i][filter.value] >= parseInt(filterSelector.value)) && (displayList[i][filter.value] <= parseInt(filterSelector2.value))) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))
                        let jDate2 = Date.parse(filterSelector2.value.slice(6, 10) + '-' + filterSelector2.value.slice(3,5) + '-' + filterSelector2.value.slice(0,2))

                        if ((iDate >= jDate) && (iDate <= jDate2)) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if ((sub.toLowerCase() >= filterSelector.value.toLowerCase()) && (sub.toLowerCase() >= filterSelector2.value.toLowerCase())) {
                                tempDisplayList.push(displayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                notDisplayList.push(displayList[i])
                            }
                        }
                    }

                    break
                case 'not between':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (!((displayList[i][filter.value].toLowerCase() >= filterSelector.value.toLowerCase()) && (displayList[i][filter.value].toLowerCase() <= filterSelector2.value.toLowerCase()))) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (!((displayList[i][filter.value] >= parseInt(filterSelector.value)) && (displayList[i][filter.value] <= parseInt(filterSelector2.value)))) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))
                        let jDate2 = Date.parse(filterSelector2.value.slice(6, 10) + '-' + filterSelector2.value.slice(3,5) + '-' + filterSelector2.value.slice(0,2))

                        if (!((iDate >= jDate) && (iDate <= jDate2))) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if ((sub.toLowerCase() >= filterSelector.value.toLowerCase()) && (sub.toLowerCase() >= filterSelector2.value.toLowerCase())) {
                                found = true
                                break
                            }
                        }
                        if (found) {
                                notDisplayList.push(displayList[i])
                            }
                        else {
                            tempDisplayList.push(displayList[i])
                        }
                    }
                    break
                case 'greater than or equal to':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (displayList[i][filter.value].toLowerCase() >= filterSelector.value.toLowerCase()) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (displayList[i][filter.value] >= parseInt(filterSelector.value)) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))

                        if (iDate >= jDate) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if (sub.toLowerCase() >= filterSelector.value.toLowerCase()) {
                                tempDisplayList.push(displayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                notDisplayList.push(displayList[i])
                            }
                        }
                    }
                    break
                case 'less than or equal to':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(filter.value)) {
                        if (displayList[i][filter.value].toLowerCase() <= filterSelector.value.toLowerCase()) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
                        if (displayList[i][filter.value] <= parseInt(filterSelector.value)) {
                            tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(filter.value)) {
                        let iDate = Date.parse(displayList[i][filter.value].slice(6, 10) + '-' + displayList[i][filter.value].slice(3,5) + '-' + displayList[i][filter.value].slice(0,2))
                        let jDate = Date.parse(filterSelector.value.slice(6, 10) + '-' + filterSelector.value.slice(3,5) + '-' + filterSelector.value.slice(0,2))

                        if (iDate <= jDate) {
                                tempDisplayList.push(displayList[i])
                        }
                        else {
                            notDisplayList.push(displayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(filter.value)) {
                        let found = false
                        for (let sub of displayList[i][filter.value]) {
                            if (sub.toLowerCase() <= filterSelector.value.toLowerCase()) {
                                tempDisplayList.push(displayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                notDisplayList.push(displayList[i])
                            }
                        }
                    }
                    break
                default:
                    return
            }
        }

        displayList = tempDisplayList
    }

    function removeFilters(prop, op, fil) {
        console.log("JFHSHL")
        console.log(prop)
        console.log(op)
        console.log(fil)

        let tempNotDisplayList = []
        
        for (let i = 0; i < notDisplayList.length; i++) {
            switch (op) {

                // If greater than is selected (>)
                case filterOperators[0]:
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if (notDisplayList[i][prop].toLowerCase() > fil.toLowerCase()) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (notDisplayList[i][prop] > parseInt(fil)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate > jDate) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if (sub.toLowerCase() > fil.toLowerCase()) {
                                tempNotDisplayList.push(notDisplayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                displayList.push(notDisplayList[i])
                            }
                        }
                    }

                    break

                // If less than is selected (<)
                case filterOperators[1]:
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if (notDisplayList[i][prop].toLowerCase() < fil.toLowerCase()) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (notDisplayList[i][prop] < parseInt(fil)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate < jDate) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if (sub.toLowerCase() < fil.toLowerCase()) {
                                tempNotDisplayList.push(notDisplayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                displayList.push(notDisplayList[i])
                            }
                        }
                    }

                    break

                // If less than is selected (==)
                case filterOperators[2]:

                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if (notDisplayList[i][prop].toLowerCase() === fil.toLowerCase()) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (notDisplayList[i][prop] === parseInt(fil)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate === jDate) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if (sub.toLowerCase() === fil.toLowerCase()) {
                                tempNotDisplayList.push(notDisplayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                displayList.push(notDisplayList[i])
                            }
                        }
                    }
                    
                    break
                case 'not equal to':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if (notDisplayList[i][prop].toLowerCase() !== fil.toLowerCase()) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (notDisplayList[i][prop] !== parseInt(fil)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate !== jDate) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if (sub.toLowerCase() === fil.toLowerCase()) {
                                found = true
                                break
                            }
                        }
                        if (found) {
                            displayList.push(notDisplayList[i])
                        }
                        else {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                    }
                    break
                case 'between':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if ((notDisplayList[i][prop].toLowerCase() >= filtersSelected[prop][op]['lower'][fil].toLowerCase()) && (notDisplayList[i][prop].toLowerCase() <= filtersSelected[prop][op]['upper'][fil].toLowerCase())) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if ((notDisplayList[i][prop] >= parseInt(filtersSelected[prop][op]['lower'][fil])) && (notDisplayList[i][prop] <= parseInt(filtersSelected[prop][op]['upper'][fil]))) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(filtersSelected[prop][op]['lower'][fil].slice(6, 10) + '-' + filtersSelected[prop][op]['lower'][fil].slice(3,5) + '-' + filtersSelected[prop][op]['lower'][fil].slice(0,2))
                        let jDate2 = Date.parse(filtersSelected[prop][op]['upper'][fil].slice(6, 10) + '-' + filtersSelected[prop][op]['upper'][fil].slice(3,5) + '-' + filtersSelected[prop][op]['upper'][fil].slice(0,2))

                        if ((iDate >= jDate) && (iDate <= jDate2)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if ((sub.toLowerCase() >= filtersSelected[prop][op]['lower'][fil].toLowerCase()) && (sub.toLowerCase() >= filtersSelected[prop][op]['upper'][fil].toLowerCase())) {
                                tempNotDisplayList.push(notDisplayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                displayList.push(notDisplayList[i])
                            }
                        }
                    }

                    break
                case 'not between':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        console.log("TESTER")
                        console.log(notDisplayList[i][prop].toLowerCase())
                        console.log(filtersSelected[prop][op]['lower'][fil].toLowerCase())
                        console.log(filtersSelected[prop][op]['upper'][fil].toLowerCase())
                        if (!((notDisplayList[i][prop].toLowerCase() >= filtersSelected[prop][op]['lower'][fil].toLowerCase()) && (notDisplayList[i][prop].toLowerCase() <= filtersSelected[prop][op]['upper'][fil].toLowerCase()))) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (!((notDisplayList[i][prop] >= parseInt(filtersSelected[prop][op]['lower'][fil])) && (notDisplayList[i][prop] <= parseInt(filtersSelected[prop][op]['upper'][fil])))) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(filtersSelected[prop][op]['lower'][fil].slice(6, 10) + '-' + filtersSelected[prop][op]['lower'][fil].slice(3,5) + '-' + filtersSelected[prop][op]['lower'][fil].slice(0,2))
                        let jDate2 = Date.parse(filtersSelected[prop][op]['upper'][fil].slice(6, 10) + '-' + filtersSelected[prop][op]['upper'][fil].slice(3,5) + '-' + filtersSelected[prop][op]['upper'][fil].slice(0,2))

                        if (!((iDate >= jDate) && (iDate <= jDate2))) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if ((sub.toLowerCase() >= filtersSelected[prop][op]['lower'][fil].toLowerCase()) && (sub.toLowerCase() >= filtersSelected[prop][op]['upper'][fil].toLowerCase())) {
                                found = true
                                break
                            }
                        }
                        if (found) {
                            displayList.push(notDisplayList[i])
                        }
                        else {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                    }
                    break

                case 'greater than or equal to':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if (notDisplayList[i][prop].toLowerCase() >= fil.toLowerCase()) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (notDisplayList[i][prop] >= parseInt(fil)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate >= jDate) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if (sub.toLowerCase() >= fil.toLowerCase()) {
                                tempNotDisplayList.push(notDisplayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                displayList.push(notDisplayList[i])
                            }
                        }
                    }
                    break
                case 'less than or equal to':
                    // String case
                    if (['Title', 'Title Type', 'Const_IMDB'].includes(prop)) {
                        if (notDisplayList[i][prop].toLowerCase() <= fil.toLowerCase()) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Number case
                    if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)) {
                        if (notDisplayList[i][prop] <= parseInt(fil)) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }
                    }

                    // Date case
                    if (['Date Rated', 'Release Date'].includes(prop)) {
                        let iDate = Date.parse(notDisplayList[i][prop].slice(6, 10) + '-' + notDisplayList[i][prop].slice(3,5) + '-' + notDisplayList[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate <= jDate) {
                            tempNotDisplayList.push(notDisplayList[i])
                        }
                        else {
                            displayList.push(notDisplayList[i])
                        }

                    }

                    // Array case
                    if (['Genres', 'Directors'].includes(prop)) {
                        let found = false
                        for (let sub of notDisplayList[i][prop]) {
                            if (sub.toLowerCase() <= fil.toLowerCase()) {
                                tempNotDisplayList.push(notDisplayList[i])
                                found = true
                                break
                            }
                            if (!found) {
                                displayList.push(notDisplayList[i])
                            }
                        }
                    }
                    break
                default:
                    return
            }
        }

        notDisplayList = tempNotDisplayList
        
        // Remove the filter from selected Filters
        if (['between', 'not between'].includes(op)) {
            filtersSelected[prop][op]['upper'].splice(fil, 1)
            filtersSelected[prop][op]['lower'].splice(fil, 1)
        }
        else {
            filtersSelected[prop][op].delete(fil)
        }

    }

    function displayFilters() {

        filterClose.innerHTML = ""

        for (let prop in filtersSelected) {
            for (let op in filtersSelected[prop]) {
                if ((['between', 'not between'].includes(op))) {
                    for (let i = 0; i < filtersSelected[prop][op]['lower'].length; i++) {
                        let spanFilter = document.createElement("span")
                        spanFilter.innerHTML = prop + ':' + op + ':' + filtersSelected[prop][op].lower[i] + ',' + filtersSelected[prop][op].upper[i]

                        let closeButton = document.createElement("button")
                        closeButton.innerHTML = '&#10006'
                        closeButton.name = 'filterCloseButton' 
                        closeButton.addEventListener('click', (evt) => {
                            removeFilters(prop, op, i)
                            displayFilters()
                            updateTable()
                        })
                        spanFilter.appendChild(closeButton)
                        filterClose.appendChild(spanFilter)
                    }
                }
                else {
                    for (let fil of filtersSelected[prop][op]) {
                        let spanFilter = document.createElement("span")
                        spanFilter.innerHTML = prop + ':' + op + ':' + fil

                        let closeButton = document.createElement("button")
                        closeButton.innerHTML = '&#10006'
                        closeButton.name = 'filterCloseButton'
                        closeButton.addEventListener('click', (evt) => {
                            removeFilters(prop, op, fil)
                            displayFilters()
                            updateTable()
                        })
                        spanFilter.appendChild(closeButton)
                        filterClose.appendChild(spanFilter)
                    }
                }
            }
        }
    }

    // When filter button by is clicked
    filterButton.addEventListener('click', () => {
        if (duplicateCheckFilters()) {
            addFilters()
            displayFilters()
            updateTable()
        }
    })


</script>