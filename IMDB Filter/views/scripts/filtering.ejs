<script>
    let notDisplayList = []
    let filterOperators = ['greater than', 'less than', 'equal to', 'not equal to', 'between', 'not between', 'greater than or equal to', 'less than or equal to']
    let filterOperatorSelector = document.getElementById('filterOperator')
    let filterOperator = document.getElementById('filterOperator')
    let filterSpan = document.getElementById('filterSpan')
    let filter = document.getElementById('filter')
    let filterButton = document.getElementById('filterButton')
    let filterClose = document.getElementById('filterClose')
    let closeButtons = document.getElementsByName('filterCloseButton')

    // Creating object for existing filters
    let filtersSelected = {}
    for (let prop of titles) {
        filtersSelected[prop] = {}
        for (let op of filterOperators) {
            if (['between', 'not between'].includes(op)) {
                filtersSelected[prop][op] = {
                    lower: [],
                    upper: []
                }
            }
            else {
                filtersSelected[prop][op] = new Set()
            }
        }
    }

    // Creating the dropdown options for the filter
    for (let i = 0; i < filterOperators.length; i++) {

        // Creates a new option for every operator
        let newSelector = document.createElement('option')
        newSelector.value = filterOperators[i]
        newSelector.innerHTML = filterOperators[i]
        filterOperatorSelector.appendChild(newSelector)
    }

    // Upates the drop down filters
    function updateDropdownsFilters() {
        while (filterSpan.firstChild) {
            filterSpan.removeChild(filterSpan.firstChild)
        }

        let filterSelector = document.createElement('select')
        filterSelector.id = "filterSelector"
        filterSpan.appendChild(filterSelector)

        // Creates two dropdowns if between's are selected
        if (['between', 'not between'].includes(filterOperator.value)) {
            let filterSelector2 = document.createElement('select')
            filterSelector2.id = "filterSelector2"
            filterSpan.appendChild(filterSelector2)
        }

        // Creates the dropdown without filtering and sorting the dropdown
        let filterList = []

        for (let i = 0; i < displayList.length; i++) {

            // Seperate to show elements in an array type
            if (['Genres', 'Directors'].includes(filter.value)) {

                for (let j = 0; j < displayList[i][filter.value].length; j++) {
                    // If not empty
                    if (displayList[i][filter.value][j]) {
                        filterList.push(displayList[i][filter.value][j])
                    }
                }
            }
            else {
                // If not empty
                if (displayList[i][filter.value]) {
                    filterList.push(displayList[i][filter.value])
                }
            }
        }

        // Removes duplicates from the filter list
        filterList = [...new Set(filterList)]

        // Sort the filter list

        // String filters
        if (['Title', 'Title Type', 'Const_IMDB', 'Genres', 'Directors'].includes(filter.value)) {
            filterList.sort((firstEl, secondEl) => {
                if (firstEl.toLowerCase() < secondEl.toLowerCase()) {
                    return -1
                }
                else {
                    return 1
                }
            })
        }

        // Number filters
        if (['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(filter.value)) {
            filterList.sort((firstEl, secondEl) => {
                return (firstEl - secondEl)
            })
        }

        // Dates filters
        if (['Date Rated', 'Release Date'].includes(filter.value)) {
            filterList.sort((firstEl, secondEl) => {
                let iDate = Date.parse(firstEl.slice(6, 10) + '-' + firstEl.slice(3,5) + '-' + firstEl.slice(0,2))
                let jDate = Date.parse(secondEl.slice(6, 10) + '-' + secondEl.slice(3,5) + '-' + secondEl.slice(0,2))
                return (iDate - jDate)
            })
        }


        // Creates the dropdown list
        for (let i = 0; i < filterList.length; i++) {
            let newOption = document.createElement('option')
            newOption.value = filterList[i]
            newOption.innerHTML = filterList[i]
            filterSelector.appendChild(newOption)
            if (['between', 'not between'].includes(filterOperator.value)) {
                filterSelector2.appendChild(newOption.cloneNode(true))
            }
        }
    }

    // Adds the dropdown when filter operator is changed
    filterOperator.addEventListener('change', updateDropdownsFilters)
    filter.addEventListener('change', updateDropdownsFilters)
    window.onload = updateDropdownsFilters()

    // Checks if the filter selected was a duplicate. If unique adds the filter and
    function duplicateCheckFilters() {
        // Check if filter is a duplicate (not betweens)
        if (filtersSelected[filter.value][filterOperator.value]) {
            if (['between', 'not between'].includes(filterOperator.value)) {
                if ((filtersSelected[filter.value][filterOperator.value].lower.includes(filterSelector.value)) && (filtersSelected[filter.value][filterOperator.value].upper.includes(filterSelector2.value))) {
                    return false
                }
                else {
                    filtersSelected[filter.value][filterOperator.value].lower.push(filterSelector.value)
                    filtersSelected[filter.value][filterOperator.value].upper.push(filterSelector2.value)
                    return true
                }
            }
            else {
                if (filtersSelected[filter.value][filterOperator.value].has(filterSelector.value)) {
                    return false
                }
                else {
                    filtersSelected[filter.value][filterOperator.value].add(filterSelector.value)
                    return true
                }
            }
        }
    }

    // Adds the selected filter, adjusts the display arrays
    function addFilters() {

        // Adjusts the display/not displayed arrays

        // If not between/not between (filterSelector2 doesnt exist)
        if (['between', 'not between'].includes(filterOperator.value)) {
            [displayList, notDisplayList] = arrayFilteringAlgorithm(displayList, notDisplayList, filterOperator.value, filter.value, filterSelector.value, filterSelector.value, filterSelector2.value)
        }
        else {
            [displayList, notDisplayList] = arrayFilteringAlgorithm(displayList, notDisplayList, filterOperator.value, filter.value, filterSelector.value, filterSelector.value, 0)
        }
     
    }

    // Removes the selected filter, adjusts the display arrays
    function removeFilters(prop, op, fil) {

        // Adjusts the display/not displayed arrays
        // If not between/not between (filterSelector2 doesnt exist)
        let tempDisplayList = []

        if (['between', 'not between'].includes(op)) {
            [notDisplayList, tempDisplayList] = arrayFilteringAlgorithm(notDisplayList, tempDisplayList, op, prop, fil, filtersSelected[prop][op]['lower'][fil], filtersSelected[prop][op]['upper'][fil])
        }
        else {
            [notDisplayList, tempDisplayList] = arrayFilteringAlgorithm(notDisplayList, tempDisplayList, op, prop, fil, 0, 0)
        }

        // Check all of the tempDisplay movies whether they match the other existing filters
        displayList = displayList.concat(tempDisplayList)

        // Remove the filter from selected filters
        if (['between', 'not between'].includes(op)) {
            filtersSelected[prop][op]['upper'].splice(fil, 1)
            filtersSelected[prop][op]['lower'].splice(fil, 1)
        }
        else {
            filtersSelected[prop][op].delete(fil)
        }

    }

    // Displays the filters under the Filter bar and above the Clear all button
    function displayFilters() {

        filterClose.innerHTML = ""

        for (let prop in filtersSelected) {
            for (let op in filtersSelected[prop]) {

                // If between/not between's selected
                if ((['between', 'not between'].includes(op))) {
                    for (let i = 0; i < filtersSelected[prop][op]['lower'].length; i++) {
                        let spanFilter = document.createElement("span")
                        spanFilter.innerHTML = prop + ':' + op + ':' + filtersSelected[prop][op].lower[i] + ',' + filtersSelected[prop][op].upper[i]

                        // Create an button to undo the filter
                        let closeButton = document.createElement("button")
                        closeButton.innerHTML = '&#10006'
                        closeButton.name = 'filterCloseButton' 
                        closeButton.addEventListener('click', (evt) => {
                            removeFilters(prop, op, i)
                            displayFilters()
                            updateTable()
                        })
                        spanFilter.appendChild(closeButton)
                        filterClose.appendChild(spanFilter)
                    }
                }
                else {
                    for (let fil of filtersSelected[prop][op]) {
                        let spanFilter = document.createElement("span")
                        spanFilter.innerHTML = prop + ':' + op + ':' + fil

                        // Create an button to undo the filter
                        let closeButton = document.createElement("button")
                        closeButton.innerHTML = '&#10006'
                        closeButton.name = 'filterCloseButton'
                        closeButton.addEventListener('click', (evt) => {
                            removeFilters(prop, op, fil)
                            displayFilters()
                            updateTable()
                        })
                        spanFilter.appendChild(closeButton)
                        filterClose.appendChild(spanFilter)
                    }
                }
            }
        }
    }

    // When filter button by is clicked
    filterButton.addEventListener('click', () => {
        if (duplicateCheckFilters()) {
            addFilters()
            displayFilters()
            updateTable()
        }
    })

    // Adjusts the display/not display array of movies
    function arrayFilteringAlgorithm(arr1, arr2, op, prop, fil, betweenL, betweenH) {

        function isStringProperty() {
            return ['Title', 'Title Type', 'Const_IMDB'].includes(prop)
        }

        function isNumberProperty() {
            return ['Your Rating', 'IMDb Rating', 'Runtime (mins)', 'Year', 'Num Votes'].includes(prop)
        }

        function isDateProperty() {
            return ['Date Rated', 'Release Date'].includes(prop)
        }

        function isArrayProperty() {
            return ['Genres', 'Directors'].includes(prop)
        }

        let tempArr1 = []

        // Filter through the selected movie list (arr1)
        for (let i = 0; i < arr1.length; i++) {
            switch (op) {
                
                // If greater than is selected (>)
                case 'greater than':

                    // String greater than
                    if (isStringProperty()) {
                        if (arr1[i][prop].toLowerCase() > fil.toLowerCase()) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number greater than
                    if (isNumberProperty()) {
                        if (arr1[i][prop] > parseInt(fil)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date greater than
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate > jDate) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array greater than
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if (sub.toLowerCase() > fil.toLowerCase()) {
                                tempArr1.push(arr1[i])
                                found = true
                                break
                            }
                            if (!found) {
                                arr2.push(arr1[i])
                            }
                        }
                    }

                    break

                // If less than is selected (<)
                case 'less than':

                    // String less than
                    if (isStringProperty()) {
                        if (arr1[i][prop].toLowerCase() < fil.toLowerCase()) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number less than
                    if (isNumberProperty()) {
                        if (arr1[i][prop] < parseInt(fil)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date less than
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate < jDate) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array less than
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if (sub.toLowerCase() < fil.toLowerCase()) {
                                tempArr1.push(arr1[i])
                                found = true
                                break
                            }
                            if (!found) {
                                arr2.push(arr1[i])
                            }
                        }
                    }

                    break

                // If equal to is selected (==)
                case 'equal to':

                    // String equal to
                    if (isStringProperty()) {
                        if (arr1[i][prop].toLowerCase() === fil.toLowerCase()) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number equal to
                    if (isNumberProperty()) {
                        if (arr1[i][prop] === parseInt(fil)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date equal to
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate === jDate) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array equal to
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if (sub.toLowerCase() === fil.toLowerCase()) {
                                tempArr1.push(arr1[i])
                                found = true
                                break
                            }
                            if (!found) {
                                arr2.push(arr1[i])
                            }
                        }
                    }
                    
                    break

                // If not equal to is selected (==)
                case 'not equal to':

                    // String not equal to
                    if (isStringProperty()) {
                        if (arr1[i][prop].toLowerCase() !== fil.toLowerCase()) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number not equal to
                    if (isNumberProperty()) {
                        if (arr1[i][prop] !== parseInt(fil)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date not equal to
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate !== jDate) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array not equal to
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if (sub.toLowerCase() === fil.toLowerCase()) {
                                found = true
                                break
                            }
                        }
                        if (found) {
                            arr2.push(arr1[i])
                        }
                        else {
                            tempArr1.push(arr1[i])
                        }
                    }

                    break

                // If between to is selected (<= <=)
                case 'between':

                    // String between
                    if (isStringProperty()) {
                        if ((arr1[i][prop].toLowerCase() >= betweenL.toLowerCase()) && (arr1[i][prop].toLowerCase() <= betweenH.toLowerCase())) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number between
                    if (isNumberProperty()) {
                        if ((arr1[i][prop] >= parseInt(betweenL)) && (arr1[i][prop] <= parseInt(betweenH))) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date between
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(betweenL.slice(6, 10) + '-' + betweenL.slice(3,5) + '-' + betweenL.slice(0,2))
                        let jDate2 = Date.parse(betweenH.slice(6, 10) + '-' + betweenH.slice(3,5) + '-' + betweenH.slice(0,2))

                        if ((iDate >= jDate) && (iDate <= jDate2)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array between
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if ((sub.toLowerCase() >= betweenL.toLowerCase()) && (sub.toLowerCase() <= betweenH.toLowerCase())) {
                                tempArr1.push(arr1[i])
                                found = true
                                break
                            }
                            if (!found) {
                                arr2.push(arr1[i])
                            }
                        }
                    }

                    break

                // If between to is selected !(<= <=)
                case 'not between':

                    // String not between
                    if (isStringProperty()) {
                        if (!((arr1[i][prop].toLowerCase() >= betweenL.toLowerCase()) && (arr1[i][prop].toLowerCase() <= betweenH.toLowerCase()))) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number not between
                    if (isNumberProperty()) {
                        if (!((arr1[i][prop] >= parseInt(betweenL)) && (arr1[i][prop] <= parseInt(betweenH)))) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date not between
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(betweenL.slice(6, 10) + '-' + betweenL.slice(3,5) + '-' + betweenL.slice(0,2))
                        let jDate2 = Date.parse(betweenH.slice(6, 10) + '-' + betweenH.slice(3,5) + '-' + betweenH.slice(0,2))

                        if (!((iDate >= jDate) && (iDate <= jDate2))) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }

                    }

                    // Array not between
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if ((sub.toLowerCase() >= betweenL.toLowerCase()) && (sub.toLowerCase() <= betweenH.toLowerCase())) {
                                found = true
                                break
                            }
                        }
                        if (found) {
                            arr2.push(arr1[i])
                        }
                        else {
                            tempArr1.push(arr1[i])
                        }
                    }

                    break

                // If greater than or equal to to is selected (>=)
                case 'greater than or equal to':

                    // String greater than or equal to
                    if (isStringProperty()) {
                        if (arr1[i][prop].toLowerCase() >= fil.toLowerCase()) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number greater than or equal to
                    if (isNumberProperty()) {
                        if (arr1[i][prop] >= parseInt(fil)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date greater than or equal to
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate >= jDate) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array greater than or equal to
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if (sub.toLowerCase() >= fil.toLowerCase()) {
                                tempArr1.push(arr1[i])
                                found = true
                                break
                            }
                            if (!found) {
                                arr2.push(arr1[i])
                            }
                        }
                    }

                    break

                // If less than or equal to to is selected (<=)
                case 'less than or equal to':

                    // String less than or equal to
                    if (isStringProperty()) {
                        if (arr1[i][prop].toLowerCase() <= fil.toLowerCase()) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Number less than or equal to
                    if (isNumberProperty()) {
                        if (arr1[i][prop] <= parseInt(fil)) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Date less than or equal to
                    if (isDateProperty()) {
                        let iDate = Date.parse(arr1[i][prop].slice(6, 10) + '-' + arr1[i][prop].slice(3,5) + '-' + arr1[i][prop].slice(0,2))
                        let jDate = Date.parse(fil.slice(6, 10) + '-' + fil.slice(3,5) + '-' + fil.slice(0,2))

                        if (iDate <= jDate) {
                            tempArr1.push(arr1[i])
                        }
                        else {
                            arr2.push(arr1[i])
                        }
                    }

                    // Array less than or equal to
                    if (isArrayProperty()) {
                        let found = false
                        for (let sub of arr1[i][prop]) {
                            if (sub.toLowerCase() <= fil.toLowerCase()) {
                                tempArr1.push(arr1[i])
                                found = true
                                break
                            }
                            if (!found) {
                                arr2.push(arr1[i])
                            }
                        }
                    }

                    break
                
                default:

                    return
            }
        }

        arr1 = tempArr1

        return [arr1, arr2]
    }
    

</script>